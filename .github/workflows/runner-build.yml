# site-ops-runner/.github/workflows/runner-build.yml
name: Build & Publish runner

on:
  push:
    tags: [ 'v*' ]         # build on SemVer tags (e.g., v1.2.3)
  workflow_run:                    # when tag-on-version-change finishes
    workflows: ["Tag when VERSION changes"]
    types: [completed]
  schedule:
    - cron: '0 3 * * 1'    # weekly rebuild (security updates)
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/site-ops-runner

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_digest: ${{ steps.digest.outputs.digest }}
      version: ${{ steps.ver.outputs.ver }}
      major: ${{ steps.ver.outputs.major }}
      minor: ${{ steps.ver.outputs.minor }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug ref
        run: |
          echo "GITHUB_REF_TYPE=$GITHUB_REF_TYPE"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"

      - name: Resolve version (from tag or VERSION file)
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VER="${GITHUB_REF_NAME#v}"
          else
            VER="$(cat VERSION)"
          fi
          echo "ver=$VER" >> "$GITHUB_OUTPUT"
          echo "major=${VER%%.*}" >> "$GITHUB_OUTPUT"
          echo "minor=${VER%.*}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.runner
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:v${{ steps.ver.outputs.ver }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.minor }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=v${{ steps.ver.outputs.ver }}
            org.opencontainers.image.revision=${{ github.sha }}
          provenance: false
          sbom: false
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Extract image digest
        id: digest
        run: echo "digest=${{ steps.build.outputs.digest }}" >> "$GITHUB_OUTPUT"

      - name: Generate SBOM (syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}
          artifact-name: sbom-runner.spdx.json

      - name: Scan (trivy)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}
          format: table
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Cosign sign
        if: startsWith(github.ref, 'refs/tags/')
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          curl -sSL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          ./cosign sign --yes ${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}

  smoke:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Pull runner image by digest
        run: docker pull ${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image_digest }}

      - name: Run smoke tests inside runner
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image_digest }} \
            /work/smoke-tests/verify-tools.sh || exit 1
